#######################Stacked bar
ppcolors <- c( 
	darkgold = "#9E7F2D",
	gold = "#D1A730",
	lightgold = "#E4CB83",
	lightergold = "#ECDBAC",
	darkest = "#6A5522",
	lightest = "#F6EED6" )

ppcolors2 <- c( 
	dark = "#49432B",
	med = "#938857",
	light = "#C3BB9B",
	lighter = "#DDD9C7",
	darkest = "#1D1B12",
	lightest = "#EEECE4" )

partycolors <- c(rep = "#BF3B27",
	dem = "#456A83", ind = "#A4A4A4",
	lnrep = "#E37F73",
	lndem = "#82A6BF",
	consrep = rgb(143/255, 44/255, 29/255),
	libdem = rgb(50/255, 78/255, 97/255))

ygcolors = c(
	'yg purple' ="#712F89",
	'yg violet' = "#CA85DE",
	'yg orchid' = "#F372A1",
	'yg pink' = "#EA5094",
	'yg red' = "#EB4F3E",
	'yg teal' = "#009996",
	'yg turquoise' = "#29CDCA"
)

greys <- c(dark = rgb(128/255, 128/255, 128/255))

##colors with contrast from RColorBrewer
colors = c("#7FC97F", "#BEAED4", "#FDC086", "#FFFF99", 
"#386CB0", "#F0027F", "#BF5B17", "#666666")

thermcolors <- c("Very cold" = "#82A6BF",
	"Somewhat cold" = "#D5E1E9",
	"Neutral" = "#D7D7D7",
	"Somewhat warm" = "#F5D6A9",
	"Very warm" = "#EA9E2C")
	
gencolors <- c("Silent" = "#377668",
	Boomer = "#64B6AA",
	Xer = "#E4CB83",
	Millennial = "#D1A730",
	"Gen Z" = "#9E7F2D")
	
############################Windows fonts
if(.Platform$OS.type == "windows") {
	windowsFonts("Franklin Gothic Book" = windowsFont("Franklin Gothic Book"))
	windowsFonts("Franklin Gothic Demi" = windowsFont("Franklin Gothic Demi"))
}
if(.Platform$OS.type == "unix") {
	fgb = "Franklin Gothic Book"
	demi = "Franklin Gothic Demi"
}


############################Stacked bar
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/stackedBar.R")

############################Dot plot
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/dotPlot.R")

############################Spaced bar
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/spacedBar.R")

############################Opposing bar
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/opposingBar.R")

############################Line trend
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/plotTrend.R")

############################Quadrant plot
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/plotQuad.R")

############################Vertical bar plot
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/verticalBar.R")

############################grouped columns
readGit("https://raw.githubusercontent.com/bjonesPew/r-functions/master/plotting_functions/colPlot.R")

####write pdf to a file and save a note
##output_pdf(tempfile, "/Figure 1", "Change the color of bars")
output_pdf <- function(file, path, note = NULL, plotting_data) {
	dir <- paste( getwd(), path, sep = "")

	if (dir.exists(dir)) {
		files <- list.files(dir, full.names = TRUE)
		for (j in files) {
			file.remove(j)
		}
	}

	dir.create(dir)
	file.copy(from = file, to = dir)
	
	if (!is.null(note)) writeLines(note, 
		paste(dir, "notes.txt", sep = "/"))

	write.data(plotting_data, dir = dir)
}


output_file <- function(file, path, note = NULL, plotting_data,
                        csv_nm = NULL, save_example = NULL,
			markdown = FALSE) {
  dir <- paste( getwd(), path, sep = "")
  
  if (dir.exists(dir)) {
    files <- list.files(dir, full.names = TRUE)
    for (j in files) {
      file.remove(j)
    }
  }
  
  dir.create(dir, recursive = TRUE)
  file.copy(from = file, to = dir)
  
  if (!is.null(csv_nm)) {
    oname <- gsub(".+/file", "", file)
    oname <- paste("file", oname, sep = "")
    suff <- gsub(".+?\\.", "", oname)
    
    nname <- gsub("\\.csv", "", csv_nm)
    file.rename(from = file,
                to = paste(dir, "/", nname, ".", suff,
                           sep = ""))
  }
  
  if (!is.null(note)) writeLines(note, 
                                 paste(dir, "notes.txt", sep = "/"))
  
  write.data(plotting_data, dir = dir, name = csv_nm)
  
  ###Save out the bit of script that generated the plot
  if (!markdown) {
  codenm <- paste(dir, "code.txt", sep = "/")
  codenm2 <- paste(dir, "all_code.txt", sep = "/")
  hist <- savehistory(codenm)
  
  ##clean the history file to save just the relevant portion
  code <- readLines(codenm)
  writeLines(code, codenm2)
  
  graph_functions = c("opposingBar", "spacedBar", "dotPlot",
  	"plotTrend", "plotQuad", "stackedBar", "spacedBar2",
	"verticalBar")
  regex = paste(".+?(<\\-|=).+?(", 
    	paste(graph_functions, collapse = "|"), ")\\(",
	sep = "")
  find.fun <- grep(regex, code)
  code <- code[tail(find.fun,1):length(code)]
  writeLines(code, codenm)
  }
  
  saveRDS(plotting_data, paste(dir, "plot_data.RDat", sep = "/"))
  
  ##Save out the replication files to an example archive
  if (!is.null(save_example)) {
  	##Find the kind of plot
	plot.ind <- regexpr("\\(", code[1])
	plot_type <- substr(code[1], 1, plot.ind)
	nonchar <- gregexpr("(=|<-)\\s+", plot_type)[[1]]
	plot_type <- substr(plot_type, nonchar + attr(nonchar, 'match.length'),
                    nchar(plot_type)-1)

	##copy directory to archive
	new.dir <- paste("~/shared/politics/Example graphics archive",
                 plot_type, save_example, sep = "/")
	dir.create(new.dir)
	file.copy(from = list.files(dir, full.names = TRUE), 
          to = new.dir, copy.date = TRUE, overwrite = TRUE)
  }
}

write.data <- function(plotting_data, dir, name = NULL) {
	if (is.null(name)) name = "plot_data.csv"
	if (class(plotting_data) != "list") write.csv(plotting_data, 
		paste(dir, name, sep = "/"))
	if (class(plotting_data) == "list") {

		ncols <- 0
		for (j in 1:length(plotting_data)) {
			ncols <- max(ncols, length(plotting_data[[j]]))
		}

		array <- array(NA, c(length(plotting_data), 
			ncols))

		for (j in 1:length(plotting_data)) {
			if (length(plotting_data[[j]]) == 0) next
			array[j,] <- as.numeric(plotting_data[[j]])
		}
		rownames(array) <- names(plotting_data)
		dn <- dimnames(plotting_data[[1]])
		if (length(dn[[2]]) == ncol(array)) colnames(array) <- dn[[2]]

		write.csv(array, 
			paste(dir, name, sep = "/"))
	}
}

###function to format dates from excel to plot in R
format.date <- function(dates) {
	years = as.numeric(format(as.Date(dates), "%Y"))
	month = as.numeric(format(as.Date(dates), "%m"))
	day =   as.numeric(format(as.Date(dates), "%d"))

	odate <- years + (month-1)/12 + (day - 1)/310
	return(odate)
}

###############Function for creating legends
createLegend <- function(lab, col.vec, width,
                         xlim = c(0,10),
                         lab.pos = NULL,
			 circle = FALSE,
			 hollow = FALSE,
                         path) {
  
  ##find the number of lines
  lines <- gregexpr("\\n", lab)
  nlines <- rep(1, length(lab))
  for (j in 1:length(lines)) {
    if (lines[[j]][1] == -1) next
    nlines[j] <- length(lines[[j]])+1
  }
  maxlines <- max(nlines)
  
  ##get the max number of characters in each
  nchar <- rep(NA, length(lab))
  for (j in 1:length(lines)) {
    if (nlines[j] == 1) nchar[j] <- nchar(lab[j])
    if (nlines[j] > 1) {
      spstr <- strsplit(lab[j], '\n')[[1]]
      nchar[j] <- max(nchar(spstr))
    }
  }
  
  height <- maxlines*.2
  dev.new(width = width, height = height)
  jpeg(path, width = width, height = height,
       units = 'in', res = 1000)
  
  ##open plot window
  par(mar = rep(.1, 4))
  plot(0,0, pch = '', xlim = xlim,
       ylim = c(-.5, .5), axes = FALSE)
  
  
  for (j in 1:length(lab)) {
    if (!circle) points(lab.pos[j], 0, pch = 15, col = col.vec[j],
           cex = 1)
    if (circle) {
      points(lab.pos[j], 0, col= col.vec[j], pch = 20, cex = 1.67)
      if (hollow) points(lab.pos[j], 0, col = "white", pch = 20, cex = 1.67/2)
    }
    text(lab.pos[j], 0, lab[j], cex = .75,
         family = "Franklin Gothic Book",
         pos = 4)
  }
  
  dev.off()
  dev.off()
}
