library(foreign)

con <- read.csv("https://raw.githubusercontent.com/jones-brad/r-functions/master/state_concordance.csv",
	as.is = TRUE)

recode <- function(var, vals, labels = NULL,
	missing_to_zero = FALSE) {
	if (class(var)[1] == "factor") lev <- levels(var)
	if (class(var)[1] != "factor") lev <- levels(factor(var))
	names(vals) <- lev
	new <- vals[as.character(var)]
	
	if (!is.null(labels)) {
		new <- factor(new, levels = sort(unique(vals)),
			labels = labels)
	}
	
	if (missing_to_zero) {
		w <- which(is.na(new))
		if (length(w) > 0) new[w] = 0
	}
	return(new)
}

##############locate a dataset in the Pew Projects directory
find.data <- function(path = NULL) {
	files <- list.files(path,
		pattern = "*.sav", full.names = TRUE)
	return(files)		
}

open.que <- function(path) {
	slash <- gregexpr("/", path)
	trim <- substr(path, 1, tail(slash[[1]],1))
	writeClipboard(trim)
	flush.console()
	hits <- list.files(trim, pattern = "que.*docx$")
	if (length(hits)>1) {
		h <- list.files(trim, pattern = "que\\.docx")
		inval <- grep("~", h)
		if (length(inval)>0) h <- h[-inval]
		if (length(hits) > length(h)) hits <- h
	}
	old.dir <- getwd()
	setwd(trim)
	if (length(hits) != 1) shell.exec(file.choose(trim))
	if (length(hits) == 1) shell.exec(hits)
}

create.party <- function(dat, party = "party",
	partyln = "partyln", overwrite = FALSE, showCheck = TRUE) {
	if (overwrite) {
		w <- which(names(dat) == "party5")
		cat("A variable called 'party5' already exists", "\n")
		if (length(w) == 1) return(dat)
	}

if (class(dat[[party]])=="factor"|class(dat[[party]])=="character") {
	dat$party5 <- "3. Ind/Other"
	w <- grep("republic", dat[[party]], ignore.case=TRUE)
	dat$party5[w] <- "5. Republican"
	w <- grep("democrat", dat[[party]], ignore.case=TRUE)
	dat$party5[w] <- "1. Democrat"
	w <- grep("republic", dat[[partyln]], ignore.case=TRUE)
	dat$party5[w] <- "4. Lean Rep"
	w <- grep("democrat", dat[[partyln]], ignore.case=TRUE)
	dat$party5[w] <- "2. Lean Dem"
	tab1 <- table(dat$party5, dat[[party]], useNA = 'ifany')
	tab2 <- table(dat$party5, dat[[partyln]], useNA = 'ifany')
}
if (class(dat[[party]])=="numeric"|class(dat[[party]])=="labelled") {
	dat$party5 <- "3. Ind/Other"
	w <- which(dat[[party]]==1)
	dat$party5[w] <- "5. Republican"
	w <- which(dat[[party]]==2)
	dat$party5[w] <- "1. Democrat"
	w <- which(dat[[partyln]]==1)
	dat$party5[w] <- "4. Lean Rep"
	w <- which(dat[[partyln]]==2)
	dat$party5[w] <- "2. Lean Dem"
	tab1 <- table(dat$party5, dat[[party]], useNA = 'ifany')
	tab2 <- table(dat$party5, dat[[partyln]], useNA = 'ifany')
}

if (showCheck) {
	cat("tabulation of party5 and party\n", "\n")
	print(tab1)
	cat("\n tabulation of party5 and partyln\n")
	print(tab2)
}

	if (length(intersect(names(dat), "partysum"))==0) {
		dat$partysum <- recode(dat$party5, c("Dem/lean Dem",
			"Dem/lean Dem", "DK/Ref-no lean",
			"Rep/lean Rep", "Rep/lean Rep"))	
	}

	return(dat)
}

#############Weighted tabulations
wtab <- function(y, i = NULL, round = TRUE, weight = NULL,
	ssize.thresh = 100) {
	if (is.null(weight)) data$W <- data$weight
	if (!is.null(weight)) data$W <- data[[weight]]

	if (is.null(i)) i <- 1:length(y)
	i <- intersect(which(!is.na(y)*data$W), i)

	if (length(i) < ssize.thresh) print(paste("n is equal to", length(i),
		"for this group"))

	data$Y <- y

	ag <- aggregate(W ~ Y, data = data[i,],
			FUN = sum)
	if (round) {
		ag[,2] <- round(ag[,2]*100/sum(data$W[i],
			na.rm=TRUE))
		return(ag)
	}
	if (!round) {
		ag[,2] <- ag[,2]*100/sum(data$W[i],
			na.rm=TRUE)
		return(ag)
	}
}


#############Weighted average
wmean <- function(y, x = NULL, i = NULL, round = TRUE) {
	if (length(i) < 100) print(paste("n is equal to", length(i),
		"for this group"))
	if (is.null(i)) i <- 1:length(y)
	data$Y <- y
	data$X <- x
	if (is.null(x)) {
		w <- which(!is.na(data$Y))
		w <- intersect(w, i)
		mu <- sum(data$Y[w]*data$weight[w])/sum(data$weight[w])
		if (round) {
			return(round(mu))
		}
		if (!round) {
			return(mu)
		}
	}
}

wtest <- function(nm, g1, g2) {
	res <- array(NA, c(1000,2))
	for (j in 1:1000) {
		s1 <- sample(g1, p = data$weight[g1], replace=TRUE)
		s2 <- sample(g2, p = data$weight[g2], replace=TRUE)
		res[j,1] <- mean(data[[nm]][s1], na.rm=TRUE)
		res[j,2] <- mean(data[[nm]][s2], na.rm=TRUE)
	}
	cat(mean(res[,1] > res[,2]), "\n")
	plot(density(res[,1]), xlim = range(res))
	lines(density(res[,2]), lty=2)
}

wxtab <- function(x, y, w, row = TRUE, cell = FALSE,
	col = FALSE) {

	wh <- which(!is.na(x)&!is.na(y)&!is.na(w))
	x <- x[wh]
	y <- y[wh]
	w <- w[wh]
	tab1 <- table(x)
	tab2 <- table(y)

	res <- array(NA, c(length(tab1), length(tab2)))
	dimnames(res) <- list(names(tab1), names(tab2))

	for (j in 1:length(tab1)) {
		wh <- which(x == names(tab1)[j])
		if (length(wh)==0) { 
			res[j,] <- 0
			next
		}
		ag <- aggregate(w[wh] ~ y[wh], FUN = sum)
		res[j,as.character(ag[,1])] <- ag[,2]
	}

	if (!row & !col & !cell) return(res)
	if (row) {
		res <- res/rowSums(res, na.rm=TRUE)
		return(res)
	}
	if (col) {
		s <- colSums(res, na.rm = TRUE)
		for (j in 1:ncol(res)) res[,k] <- res[,k]/s[k]
		return(res)
	}
	if (cell) {
		res <- res/sum(res, na.rm = TRUE)
		return(res)
	}
}

find.attr <- function(attr, query) {
	res <- NULL
	for (j in 1:length(attr)) {
		hits <- grep(query, tolower(names(attr[[j]])))	
		if (length(hits)>0) res <- c(res, names(attr)[j])
	}
	return(res)
}

#con <- read.csv("state concordance.csv", as.is=TRUE)

#####################get latest panel wave
get.panel <- function(str) {

	waves <- list.files("S:/Methodology/Panel/Panel Waves", 
		pattern = str, full.names = TRUE)
	dir <- paste(waves, "Data and Analysis", sep="/")

	regex <- paste(str, ".*?\\.sav$", sep = "")
	files <- list.files(dir, pattern = regex,
		full.names = TRUE)

	

	if (length(files)==0) {
		files <- list.files(dir, pattern = "\\.sav$",
			full.names = TRUE, recursive = TRUE)
	}

	if (length(files) > 1) {
		info <- file.info(files)
		ind <- which.max(info$mtime)
		return(rownames(info)[ind])
	}



	return(files)
}


#####################get latest panel wave
get.frame <- function(str) {

	waves <- list.files("S:/Methodology/Panel/Panel Waves/Frame File", 
		pattern = str, full.names = TRUE)

	regex <- paste(str, ".*?\\.sav$", sep = "")
	files <- list.files(waves, pattern = regex,
		full.names = TRUE)

	

	if (length(files)==0) {
		files <- list.files(dir, pattern = "\\.sav$",
			full.names = TRUE, recursive = TRUE)
	}

	if (length(files) > 1) {
		info <- file.info(files)
		ind <- which.max(info$mtime)
		return(rownames(info)[ind])
	}



	return(files)
}

#########################get 5 point thermometer rating
code.therm <- function(t) {
	inds <- which(!is.na(t))
	if (class(t)[1] == "factor") t <- as.numeric(as.character(t))
	
	t5 <- rep(NA, length(t))
	t5[inds] <- 6
	wh <- which(t <= 100)
	t5[wh] <- 5
	wh <- which(t < 76)
	t5[wh] <- 4
	wh <- which(t < 51)
	t5[wh] <- 3
	wh <- which(t < 50)
	t5[wh] <- 2
	wh <- which(t < 25)
	t5[wh] <- 1
	t5 <- factor(t5, labels = c("Very cold", "Cold", "Neutral",
		"Warm", "Very warm", "DK/Ref"), levels = 1:6)
	return(t5)
}

inout.therm <- function(rtherm, dtherm, party) {
	intherm <- rep(NA, length(dtherm))
	outtherm <- rep(NA, length(dtherm))
	
	if (class(party)=="factor") {
		reps <- grep("Rep", party)
		dems <- grep("Dem", party)
	}
	
	if (class(party)=="numeric") {
		reps <- which(party == 1)
		dems <- which(party == 2)
	}
	
	intherm[reps] <- rtherm[reps]
	intherm[dems] <- dtherm[dems]
	
	outtherm[reps] <- dtherm[reps]
	outtherm[dems] <- rtherm[dems]
	
	return(list("in" = intherm, "out" = outtherm))
}

delta.therm <- function(t1, t2) {
	delta <- rep(NA, length(t1)) 

	wh <- which(t1 == 999)
	t1[wh] <- NA
	wh <- which(t2 == 999)
	t2[wh] <- NA

	wh <- which(t1 < 50 & t2 < 50)
	delta[wh] <- 1
	wh <- which(t1 > 49 & t2 < 50)
	delta[wh] <- 2
	wh <- which(t1 == 50 & t2 == 50)
	delta[wh] <- 3
	wh <- which(t1 < 51 & t2 > 50)
	delta[wh] <- 4
	wh <- which(t1 > 50 & t2 > 50)
	delta[wh] <- 5

	delta <- factor(delta, labels = c("Cold", "Colder", "Neutral",
		"Warmer", "Warm"))
	return(delta)
}


delta.therm2 <- function(t1, t2, cuts = c(25,5,-5,-25)) {
	delta <- rep(NA, length(t1)) 

	wh <- which(t1 == 999)
	t1[wh] <- NA
	wh <- which(t2 == 999)
	t2[wh] <- NA

	diff <- t2 - t1

	wh <- which(!is.na(diff))
	delta[wh] <- 5
	wh <- which(diff < cuts[1])
	delta[wh] <- 4
	wh <- which(diff < cuts[2])
	delta[wh] <- 3
	wh <- which(diff < cuts[3])
	delta[wh] <- 2
	wh <- which(diff < cuts[4])
	delta[wh] <- 1


	delta <- factor(delta, labels = c("Much colder", "Colder",
		"About the same", "Warmer", "Much warmer"))
	return(delta)
}

####Rolling average function
roll_avg <- function(x, y, window = 5) {
	start <- 1
	end <- window
	res <- NULL
	while (end <= length(x)) {
		inds <- start:end
		res <- rbind(res, 
			c(mean(x[inds], na.rm = TRUE), mean(y[inds], na.rm = TRUE)))
		start <- start+1
		end <- end+1
	}
	return(res)
}

####Rolling median function
roll_med <- function(x, y, window = 5) {
	start <- 1
	end <- window
	res <- NULL
	while (end <= length(x)) {
		inds <- start:end
		res <- rbind(res, 
			c(mean(x[inds]), median(y[inds])))
		start <- start+1
		end <- end+1
	}
	return(res)
}



test.diff <- function(x1, w1, x2, w2) {
	wh <- which(!is.na(w1))
	x1 <- x1[wh]
	w1 <- w1[wh]

	wh <- which(!is.na(w2))
	x2 <- x2[wh]
	w2 <- w2[wh]

	res <- array(NA, c(1000, 2))
	for (j in 1:1000) {
		s1 <- sample(x1, p = w1, size = length(x1),
			replace = TRUE)
		s2 <- sample(x2, p = w2, size = length(x2),
			replace = TRUE)
		res[j,1] <- mean(s1, na.rm=TRUE)
		res[j,2] <- mean(s2, na.rm=TRUE)
	}
	return( mean(res[,1] < res[,2] ) )
}


create.party2 <- function(party, partyln, partystr = NULL) {

	if (class(party)[1] == "haven_labelled") party <- to_factor(party)
	if (class(partyln)[1] == "haven_labelled") partyln <- to_factor(partyln)
	if (class(partystr)[1] == "haven_labelled") partystr <- to_factor(partystr)

	wh <- which(is.na(party)&is.na(partyln))
	party5 <- rep("3. Ind/Other", length(party))
	party5[wh] <- NA


	w <- grep("republic", party, ignore.case=TRUE)
	party5[w] <- "5. Republican"
	if (!is.null(partystr)) {
		w2 <- grep("^strong", partystr, ignore.case=TRUE)
		inds <- intersect(w, w2)
		party5[inds] <- "6. Strong Rep"
	}
	w <- grep("democrat", party, ignore.case=TRUE)
	party5[w] <- "1. Democrat"
	if (!is.null(partystr)) {
		w2 <- grep("^strong", partystr, ignore.case=TRUE)
		inds <- intersect(w, w2)
		party5[inds] <- "0. Strong Dem"
	}
	w <- grep("republic", partyln, ignore.case=TRUE)
	party5[w] <- "4. Lean Rep"
	w <- grep("democrat", partyln, ignore.case=TRUE)
	party5[w] <- "2. Lean Dem"

	party5 <- factor(party5)

	return(party5)
}


#############Weighted average
wmean <- function(y, i = NULL, round = TRUE, weight) {
	if (length(i) < 100) print(paste("n is equal to", length(i),
		"for this group"))
	if (is.null(i)) i <- 1:length(y)

		w <- which(!is.na(y))
		w <- intersect(w, i)
		mu <- sum(y[w]*weight[w])/sum(weight[w])
		if (round) {
			return(round(mu))
		}
		if (!round) {
			return(mu)
		}
}



##########################Chunker
chunk <- function(vlist, data) {
	dat <- data
	lev <- list()
	for (j in vlist) {
		if (is.factor(data[[j]])) lv <- levels(data[[j]])
		if (!is.factor(data[[j]])) lv <- levels(factor(data[[j]]))
		lev[[j]] <- lv
	}

	grp <- rep(0, nrow(dat))
	grps <- 1
	dat$grp.name <- ""
	for (j in vlist) {
		tab <- table(dat$grp.name, dat[[j]])
		inds <- which(tab > 100, arr.ind = TRUE)
		for (k in which(tab > 100)) {
			wh <- which(dat[[j]] == colnames(tab)[k],
				arr.ind = TRUE)
			dat$grp.name[wh] <- paste(dat$grp.name[wh], 
				colnames(tab)[k])
		}
	}
}

#######################create age4 from raw age

create.age4 <- function(age, age.breaks = c(65, 50, 30)) {
	if (class(age)[1] == "factor") age <- as.numeric(as.character(age))
	
	age4 <- rep(9, length(age))
	wh <- which(age < 99)
	age4[wh] <- 4
	wh <- which(age < age.breaks[1])
	age4[wh] <- 3
	wh <- which(age < age.breaks[2])
	age4[wh] <- 2
	wh <- which(age < age.breaks[3])
	age4[wh] <- 1

	lab <- c( paste0( "Ages 18-", age.breaks[3]-1),
		paste(age.breaks[3], age.breaks[2]-1, sep="-"),
		paste(age.breaks[2], age.breaks[1]-1, sep="-"),
		paste0(age.breaks[1], "+"), "DK/Refused")

	age4 <- factor(age4, labels = lab)

	return(age4)
}

create.partylnideo <- function(party, ideo) {
	out <- rep(9, length(party))

	party <- as.numeric(party)
	ideo <- as.numeric(ideo)
	wh <- which( party == 1 & ideo < 3)
	out[wh] <- 1
	wh <- which( party == 1 & ideo > 2 & ideo < 6 )
	out[wh] <- 2
	wh <- which( party == 2 & ideo < 4 )
	out[wh] <- 3
	wh <- which( party == 2 & ideo > 3 & ideo < 6 )
	out[wh] <- 4

	out <- factor(out, labels = c("Cons R/R lean", "Mod/Lib R",
		"Mod/Cons D", "Lib D/D lean", "Refused"))
	return(out)
}


recode2 <- function(var) {
      if (class(var) == "factor") lev <- levels(var)
      if (class(var) != "factor") lev <- levels(factor(var))
	vals <- rep(NA, length(lev))
	for (j in 1:length(lev)) {
		vals[j] <- readline(prompt = paste(lev[j], ":", sep=""))
	}
	names(vals) <- lev
	new <- as.numeric(vals[as.character(var)])
	return(new)
}

#####Create education4 from panel data
create.edu4 <- function(educ) {
  ed4 <- recode(educ, c(4,4,3,3,2,1,9),
                c("Postgrad", "College grad",
                  "Some college", "HS or less",
                  "Refused"))
  return(ed4)
}

create.educ3 <- function(educ) {
	ed3 <- rep(NA, length(educ))
	wh <- which(!is.na(educ))
	ed3[wh] <- 9

	hs <- grep("(high school|hs)", educ, ignore.case=TRUE)
	ed3[hs] <- 3
	
	some <- grep("(some college|associate)", educ, ignore.case=TRUE)
	ed3[some] <- 2
	
	coll <- grep("(four year|postgrad)", educ, ignore.case=TRUE)
	ed3[coll] <- 1

	return(ed3)
}

get.merge <- function() {
	files <- list.files("P:/Pew Projects/Merge File",
		pattern = "*.sav", full.names = TRUE)
	return(files)
}

###Create age category variable with arbitrary number of categories
create.agecat <- function(age, age.breaks = c(65, 50, 30)) {
        if (class(age) == "factor") {
		age <- as.character(age)
		age <- gsub("[^0-9]", "", age)
		age <- as.numeric(age)
        }
	
        agecat <- rep(99, length(age))
        wh <- which(age < 99)
        agecat[wh] <- length(age.breaks)+1
        
        for (j in 1:length(age.breaks)) {
        wh <- which(age < age.breaks[j])
          agecat[wh] <- length(age.breaks)-j+1
        }

        rbreaks <- rev(age.breaks)
        lab <- paste0("18-", rbreaks[1]-1)
        for (j in 2:(length(age.breaks))) {
                lab <- c(lab, paste(rbreaks[j-1], 
                        rbreaks[j]-1, sep = "-"))
        }
        lab <- c(lab, paste0(rbreaks[j], "+"), "DK/Ref")

        agecat <- factor(agecat, levels = c(1:(length(age.breaks)+1), 99),
		labels = lab)

        return(agecat)
}


####Functions for calculating great circle distances in miles
####convert degrees to radians for distance calculation
deg2rad <- function(deg) return(deg*pi/180)
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the
# Spherical Law of Cosines (slc)
gcd.slc <- function(long1, lat1, long2, lat2) {
	##convert coordinates to radians
	lat1 <- deg2rad(lat1)
	long1 <- deg2rad(long1)
	lat2 <- deg2rad(lat2)
	long2 <- deg2rad(long2)
	R <- 3959 # Earth mean radius [miles]

	##container for distances
	d_vec <- rep(NA, length(long2))
	for (i in 1:length(long2)) {
	##find distances from each point
	  d_vec[i] <- acos(sin(lat1)*sin(lat2[i]) + 
		cos(lat1)*cos(lat2[i]) * cos(abs(long2[i]-long1))) * R
	}
	
	return(d_vec)
}

create.gen <- function(age, svy.yr) {
	byear <- svy.yr - age
	gen <- rep(NA, length(age))
	w <- which(byear < svy.yr)
	gen[w] <- 7
	w <- which(byear < 1997)
	gen[w] <- 6
	w <- which(byear < 1981)
	gen[w] <- 5
	w <- which(byear < 1965)
	gen[w] <- 4
	w <- which(byear < 1946)
	gen[w] <- 3
	w <- which(byear < 1928)
	gen[w] <- 2
	w <- which(byear < 1901)
	gen[w] <- 1
	tab <- table(gen)
	lab <- c("Dead", "Greatest", "Silent", "Boomer", "Xer", 
		"Millennial", "Post-Mill")
	int <- intersect(names(tab), names(lab))
	gen <- factor(gen, 
		levels = as.character(1:7))
	levels(gen) <- lab
	return(gen)
}

##############Load SPSS

load_spss <- function(nm = NULL, path = NULL) {
	dat <- read.spss(find.data(nm, path = path),
		to.data.frame = TRUE, use.value.labels = FALSE)
	dat$cons <- 1
	return(dat)
}


test_sig <- function(deff, p1, n1, p2, n2) {

	thresh <- sqrt(deff)*1.96*(sqrt((((p1)*(1-(p1)))/n1)+(((p2)*(1-(p2)))/n2)))
	return(thresh)

}

####convert degrees to radians for distance calculation
deg2rad <- function(deg) return(deg*pi/180)
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the
# Spherical Law of Cosines (slc)
gcd.slc <- function(long1, lat1, long2, lat2) {
	lat1 <- deg2rad(lat1)
	long1 <- deg2rad(long1)
	lat2 <- deg2rad(lat2)
	long2 <- deg2rad(long2)
	R <- 3959 # Earth mean radius [miles]
#  d <- acos(sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2) * cos(abs(long2-long1))) * R
	d_vec <- rep(NA, length(long2))
	for (i in 1:length(long2)) {
	  d_vec[i] <- acos(sin(lat1)*sin(lat2[i]) + cos(lat1)*cos(lat2[i]) * cos(abs(long2[i]-long1))) * R
	}
	#wh <- which.min(d_vec)
  return(d_vec)
#  return(min(d)) # Distance in miles
}


##############loess plot
lo.plot <- function(dv, iv, new.plot = TRUE, 
	ylim = c(0,1), xlim = NULL, col = "black",
	main = "", xlab = "", ylab = "", xtransform = NULL, 
	weight = NULL, lwd = 1) {

	
	lo <- loess(dv ~ iv, weight = weight)
	ord <- order(lo$x)
	if (is.null(xlim)) xlim = range(lo$x)
	if (new.plot) {
		if (!is.null(xtransform)) iv <- xtransform(iv)
		plot(lo$x[ord], lo$fitted[ord],
			type = 'l', ylim = ylim, xlim = xlim,
			col = col, main = main, xlab = xlab,
			ylab = ylab, lwd = lwd)
	}
	if (!new.plot) {
		lines(lo$x[ord], lo$fitted[ord], col = col,
			lwd = lwd)
	}
}


######################generations from age and year

create.gen <- function(age, year) {
	if (class(age)=="factor") {
		age <- gsub("97[^0-9]", 97, age)
		age <- as.numeric( as.character(age) )
	}

	gen <- rep(7, length(age))
	byear <- year - age
	w <- which(byear > 1800)
	gen[w] <- 6
	w <- which(byear > 1927)
	gen[w] <- 5
	w <- which(byear > 1945)
	gen[w] <- 4
	w <- which(byear > 1964)
	gen[w] <- 3
	w <- which(byear > 1980)
	gen[w] <- 2
	w <- which(byear > 1996)
	gen[w] <- 1
	
	lab <- c("Gen Z",
		"Mill", "Gen X", "Boomer", "Silent",
		"Greatest+", "DK/Ref")

	tab <- table(gen)

	mis <- setdiff(1:7, names(tab))

	gen <- factor(gen, labels = lab,
		levels = 1:7, exclude = lab[mis] )
	return(gen)
	
}

#################Find vars in a dataframe
find.vars <- function(str, data) {
	inds <- grep(str, names(data), ignore.case = TRUE)
	return(names(data)[inds])
}




###############Pew methods functions

calculate_deff <- function (weight, include_zeroes = FALSE, at = .5) 
{
    weight <- as.numeric(weight)
    if (!include_zeroes) 
        weight <- ifelse(weight == 0, NA_real_, weight)
    n = length(na.omit(weight))
    mean_wt = mean(weight, na.rm = T)
    sd_wt = sd(weight, na.rm = T)
    deff = 1 + (sd_wt/mean_wt)^2
    ess = n/deff
    variance = ((at*(1-at))/n) * deff
    std_err = sqrt(variance)
    moe = 1.96 * std_err * 100
    return(list(n = n, sd_wt = sd_wt, deff = deff, ess = ess, 
        moe = moe))
}




####Weighted cross tab with ss and ess
wxtab2 = function(x, y, w, round = FALSE,
                  nets = NULL) {
  
  if (class(x)[1] == "haven_labelled") x <- to_factor(x)
  if (class(y)[1] == "haven_labelled") y <- to_factor(y)
  
  wh <- which(!is.na(x)&!is.na(y)&!is.na(w))
  x <- x[wh]
  y <- y[wh]
  w <- w[wh]
  tab1 <- table(x)
  tab2 <- table(y)
  
  res <- array(0, c(length(tab1), length(tab2)+length(nets)))
  dimnames(res) <- list(names(tab1), c(names(tab2), names(nets)))
  tot <- rep(NA, length(tab1))
  
  for (j in 1:length(tab1)) {
    wh <- which(x == names(tab1)[j])
    if (length(wh)==0) { 
      res[j,] <- 0
      next
    }
    ag <- aggregate(w[wh] ~ y[wh], FUN = sum)
    res[j,as.character(ag[,1])] <- ag[,2]
    tot[j] <- sum(res[j,])
    if (!is.null(nets)) {
      for (k in 1:length(nets)) {
        vals = dimnames(res)[[2]][nets[[k]]]
        res[j,names(nets)[k]] <- sum(
          ag[which(is.element(ag[,1],vals)),2])
      }
    }
  }
  
  
  res <- res/tot
  if (round) res = round(res*100)
  
  ssize <- array(NA, c(length(tab1), 2))
  colnames(ssize) <- c("n", "ess")
  
  ###get ss
  for (j in 1:length(tab1)) {
    wh <- which(x == names(tab1)[j])
    ss <- calculate_deff(w[wh])
    ssize[j,'n'] <- ss$n
    ssize[j,'ess'] <- ss$ess
  }
  
  res <- cbind(res, ssize)
  
  return(res)
  
}

###Github
readGit <- function(path) {
	tmp <- tempfile(fileext = ".R")
	text <- readLines(path)
	writeLines(text, tmp)
	source(tmp)
}


################Significance testing
#source("S:/Common/Brad/error_calc_functions.R")

readGit("https://raw.githubusercontent.com/jones-brad/r-functions/master/plot_functions")
readGit("https://raw.githubusercontent.com/jones-brad/r-functions/master/mode_effects")
readGit("https://raw.githubusercontent.com/jones-brad/r-functions/master/banner functions.R")

###########Get party indices
partyinds <- function(dat, partynm) {
	if ( class(dat[[partynm]]) == "factor" |
		class(dat[[partynm]]) == "string") {
		dems <- grep("dem", dat[[partynm]], ignore.case = TRUE)
		reps <- grep("rep", dat[[partynm]], ignore.case = TRUE)
	}
	
	if ( class(dat[[partynm]]) == "numeric") {
		dems <- which(dat[[partynm]] == 2)
		reps <- which(dat[[partynm]] == 1)
	}
	
	return(list(reps = reps, dems = dems))
}

###Get the sample sizes for four-way form splits
form_com <- function(form) {
	tab <- table(form)
	lev <- names(tab)

	grid <- expand.grid(lev, lev)
	w <- which(grid[,1] == grid[,2])
	grid <- grid[-w,]

	f12 <- tab[lev[1]] + tab[lev[2]]
	f13 <- tab[lev[1]] + tab[lev[3]]
	f14 <- tab[lev[1]] + tab[lev[4]]
	f23 <- tab[lev[2]] + tab[lev[3]]
	f24 <- tab[lev[2]] + tab[lev[4]]
	f34 <- tab[lev[3]] + tab[lev[4]]

 

	return(list(total = sum(tab),
		minHalf = c(which.min(c(f12, f13, f14, f23, f24, f34)),
			min(c(f12, f13, f14, f23, f24, f34))),
		minQuarter = c(which.min(tab), min(tab))))
}

###########Error calculator function

##########Difference in two proportions

diff_prop <- function(var1, var2, wgt1, wgt2,
	p1 = NULL, p2 = NULL, n1 = NULL, n2 = NULL, deff = NULL){

	w1 <- which(!is.na(var1) & !is.na(wgt1))
	###first proportion
	if (is.null(p1)) p1 = sum(var1[w1]*wgt1[w1])/sum(wgt1[w1])
	if (!is.null(wgt1)) v1 = (calculate_deff(wgt1[w1], at = p1)$moe/196)^2
	if (!is.null(p1) & !is.null(n1) & !is.null(deff)) {
		v1 = ((p1*(1-p1))/n1) * deff
		v1 = 196*sqrt(v1)
	}

	w2 <- which(!is.na(var2) & !is.na(wgt2))
	##second proportion
	if (is.null(p2)) p2 = sum(var2[w2]*wgt2[w2])/sum(wgt2[w2])
	if (!is.null(wgt2)) v2 = (calculate_deff(wgt2[w2], at = p2)$moe/196)^2
	if (!is.null(p1) & !is.null(n1) & !is.null(deff)) {
		v2 = ((p2*(1-p2))/n2) * deff
		v2 = 196*sqrt(v2)
	}

	##calculation
	num = (p1 - p2)
	denom = sqrt( v1 + v2 )
	z = num/denom

	return(paste("p =", round(abs(dnorm(z)),3)) )
}

#####################4-way approval
create.approval4 <- function(appr, strength) {
	appr4 <- rep(NA, length(appr))
	app <- grep("Approv", appr)
	dis <- grep("Disapp", appr)
	str <- grep("Very strong", strength)
	not <- grep("Not so strong", strength)
	
	###mis
	w <- which(!is.na(appr))
	appr4[w] <- 9
	
	###strong approval
	inds <- intersect(app, str)
	appr4[inds] <- 1
	
	###Not strong approval
	inds <- intersect(app, not)
	appr4[inds] <- 2
	
	###Not strong disapproval
	inds <- intersect(dis, not)
	appr4[inds] <- 3
	
	###Strong disapproval
	inds <- intersect(dis, str)
	appr4[inds] <- 4
	
	appr4 <- recode(appr4, c(1:4,9),
		c("Str app", "App", "Dis", "Str dis", "DK/Ref"))
	return(appr4)
}



combine_vars <- function(var1, var2) {
	if (class(var1)[1] == "haven_labelled") var1 <- to_factor(var1)
	if (class(var2)[1] == "haven_labelled") var2 <- to_factor(var2)
	
	tab <- table(var1, var2)
	
	##get the levels of each variable
	lev1 <- rownames(tab)
	lev2 <- colnames(tab)

	##combine the levels
	grid <- expand.grid(lev1, lev2)
	grid$name <- paste(grid[[1]], grid[[2]], sep = ", ")

	##remove the DK/Ref
	dk <- grep("(ref|DK|don\\'t know)", grid$name,
		ignore.case = TRUE)
	if (length(dk)> 0) grid <- grid[-dk,]

	##set up new variable
	new.var <- rep(99, length(var1))
	for (j in 1:nrow(grid)) {
		w <- which(var1 == grid[[1]][j] &
			var2 == grid[[2]][j])
		new.var[w] <- j
	}

	new.var <- factor(new.var, 
		levels = c(1:nrow(grid), 99),
		labels = c(grid$name, "Refused"))

	return(new.var)
}


####Expects a codebook with variable definitions
read_ascii <- function(dir = getwd(),
	data = NULL, codebook = NULL,
	out_name = NULL, return = FALSE) {

	##get original working directory
	odir <- getwd()
	#change directory
	setwd(dir)
	
	###Identify the data file
	if (is.null(data)) data = list.files(dir, 
		pattern = "\\.(dat|DAT)$")

	###Find the codebook
	if (is.null(codebook)) codebook = list.files(dir,
		pattern = "\\.csv$")
	cbk <- read.csv(codebook, as.is = TRUE)

	##get meta data from the codebook file
	w <- which(cbk$name == "META")
	cards <- cbk$card[w]
	cbk <- cbk[-w,]

	##read raw data
	raw <- readLines(data)

	##separate out data on cards
	craw <- list()
	inds <- rep(1:cards, length(raw)/cards)
	for (j in 1:cards) craw[[j]] <- raw[which(inds==j)]

	odat <- data.frame(id = 1:length(craw[[1]]))

	##add variables from codebook
	for (j in 1:nrow(cbk)) {
		var <- substr(craw[[cbk$card[j]]], cbk$pos[j],
			cbk$pos[j]+cbk$len[j]-1)
		if (cbk$vals[j]!="") {
			v <- strsplit(cbk$vals[j], ", ")[[1]]
			ext <- strsplit(v, " = ")
			##get levels and labels from codebook vals
			levels <- labels <- NULL
			for (k in 1:length(ext)) {
				levels <- c(levels, as.numeric(ext[[k]][1]))
				labels <- c(labels, ext[[k]][2])
			}
			var <- factor(as.numeric(var), levels = levels,
				labels = labels)
			
		}
		
		odat[[cbk$name[j]]] <- var
	}
	
	if (is.null(out_name)) out_name <- gsub("\\.dat$", "", data)
	fnm <- paste(dir, "/", out_name, ".rdat", sep = "")
	saveRDS(odat, fnm)

	##change working directory back to original
	setwd(odir)
	
	if (return) return(odat)
}


#############Format a haven read spss variable to a standard factor
to_factor <- function(var) {
	if (class(var)[1] != "haven_labelled") return(var)
	lev <- attr(var, 'labels')
	lev <- sort(lev)
	fac <- factor(var, levels = lev,
		labels = names(lev))
	return(fac)
}


###################Write excel docs from pew_methods
df_list_to_xlsx = function (df_list, sheet_name, outfile, overwrite = TRUE, label_list = NULL, 
    title = NULL, borders = "surrounding") 
{
	require("openxlsx")
    wb <- createWorkbook()

    if (any(nchar(sheet_name) > 31)) {
        warning("Excel sheet names cannot contain more than 31 characters. These names will automatically be cut down to 31 characters.")
        sheet_name <- str_sub(sheet_name, start = 1, end = 31)
    }
    if (length(sheet_name) == 1) {
        df_list <- list(df_list)
        if (!is.null(label_list)) {
            label_list <- list(label_list)
        }
    }
    if (!is.null(title)) {
        if (length(title) != length(df_list)) 
            stop("df_list and title should both be as long as the number of sheets needed")
    }
    if (!is.null(label_list)) {
        if (length(label_list) != length(df_list)) 
            stop("label_list and title should both be as long as the number of sheets needed")
    }
    for (i in 1:length(df_list)) {
        addWorksheet(wb, sheetName = sheet_name[i])
        if (!is.null(title)) {
            writeData(wb, sheet = sheet_name[i], x = title[i], 
                startCol = 1, startRow = 1)
        }
        sr <- ifelse(!is.null(title), 3, 1)
        if (is.null(label_list)) {
            for (j in 1:length(df_list[[i]])) {
                writeData(wb, sheet = sheet_name[i], x = df_list[[i]][[j]], 
                  startCol = 1, startRow = sr, borders = borders)
                sr <- sr + nrow(df_list[[i]][[j]]) + 2
            }
        }
        else if (!is.null(label_list)) {
            if (length(df_list[[i]]) != length(label_list[[i]])) {
                stop("The list of dataframes and list of labels in THIS sheet should be the same length.")
            }
            for (j in 1:length(df_list[[i]])) {
                writeData(wb, sheet = sheet_name[i], x = label_list[[i]][[j]], 
                  startCol = 1, startRow = sr)
                writeData(wb, sheet = sheet_name[i], x = df_list[[i]][[j]], 
                  startCol = 1, startRow = sr + 1, borders = borders)
                sr <- sr + nrow(df_list[[i]][[j]]) + 3
            }
        }
    }
    saveWorkbook(wb, file = outfile, overwrite = overwrite)
}


#####################Compile data into a single spreadsheet
compile_data <- function(path, nm) {

files <- list.files(path, 
	pattern = "\\.csv$", recursive = TRUE, full.name = TRUE)
names <- list.files(path, 
	pattern = "\\.csv$", recursive = TRUE)

master.list <- list()
for (j in 1:length(files)) {
	sheet <- read.csv(files[j])
	master.list[[j]] <- list(sheet)
}

cond <- TRUE
while (cond) {
	slash <- regexpr("/", names)
	if (slash[1] == -1) cond = FALSE
	names <- substr(names, slash + 1, 1000)
	names <- gsub("\\.csv$", "", names)
}

fnm <- paste(path, nm)
df_list_to_xlsx(master.list, names, 
	fnm, 
	borders = "none")


}

####test difference in proportions
sig_test <- function(ess1, mu1, ess2, mu2) {
  return(abs(mu1 - mu2)/sqrt(
    mu1*(1-mu1)/ess1 + 
      mu2*(1-mu2)/ess2
  ))
}

#####################get latest panel wave from the RStudio server
get.panel.server <- function(str) {
  
  waves <- list.files("~/shared/atp_data", 
                      pattern = str, full.names = TRUE)
  return(waves)
}


######################Set up a new analysis folder

create_new_folder <- function(path = getwd(), name) {
  new.path <- paste(path, name, sep = "/")
  
  #prevent overwriting
  if (dir.exists(new.path)) return(
   cat(paste("The directory", new.path, "already exists")))
  ##Create the main directory
  dir.create(new.path)
  
  ##Populate it with folders for code, data, and figures
  
  dir.create(paste(new.path, "code", sep = "/"))
  dir.create(paste(new.path, "data", sep = "/"))
  dir.create(paste(new.path, "figures", sep = "/"))
  
  ##add a blank 'eda' file with the header
  script <- readLines("https://raw.githubusercontent.com/jones-brad/r-functions/master/template_script.txt")
  ##add a setwd line
  to.add <- paste("setwd('", new.path, "')", sep = "")
  script <- c(script, to.add)
  to.add <- c(script, "", "## Set up data", "wt_names = 'weight'", "source('code/set up data.R')", "",
                  "## Analysis script", "source('code/analysis.R')")
  writeLines(script, paste(new.path, "eda.R", sep = "/"))

  ##add a 'set up data' script template to the code folder
  setup <- readLines("https://raw.githubusercontent.com/jones-brad/r-functions/master/setup_template.txt")
  writeLines(setup, paste(new.path, "set up data.R", sep = "/"))
}

####function to populate a list for a plot
###Takes a yvar, a set of xvars (expecting dataframe), and a weight
###Returns a list with the cross-tabs of yvar by each element of xvars
###Prints warnings if the ESS for any xvar is < 100
create_plot_list <- function(yvar, xvars, weight) {
  ##create the list
  to.plot <- list()
  
  ##collect warnings about small ess
  warnings <- NULL
  
  ##Populate the list
  for (j in 1:ncol(xvars)) {
    tab <- wxtab2(xvars[,j], yvar, weight)
    
    #flag refusals and remove from tab
    ref <- grep("Refused", rownames(tab))
    if (length(ref) > 0) tab <- tab[-ref,]
    if (nrow(tab) == 0) next
    
    ##Add each level of each xvar to the list
    for (k in 1:nrow(tab)) {
      to.plot[[rownames(tab)[k]]] <- tab[k,]
      if (tab[k,'ess'] < 100) {
        warn <- paste(colnames(xvars)[j], "level", rownames(tab)[k],
                      "ess =", round(tab[k,'ess']))
        warnings <- c(warnings, warn)
      }
    }
    
    ##Add blank lines separating each variable
    if (j != ncol(xvars)) to.plot <- c(to.plot, list(NULL))
  }
  
  if (!is.null(warnings)) cat(warnings, sep = "\n")
  
  return(to.plot)
}


##Weighted mean by group----
wmean_bygroup <- function(x, group, weight) {
  ##get the weighted sum
  ##remove any missing data
  nmis <- which(!is.na(x) & !is.na(group) & !is.na(weight))
  x <- x[nmis]
  group <- group[nmis]
  weight <- weight[nmis]
  ag <- aggregate(x*weight ~ group, FUN = sum)
  wag <- aggregate(weight ~ group, FUN = sum)
  ##weighted mean
  ret = ag[,2]/wag[,2]
  names(ret) <- ag[,1]
  return(ret)
}

#####tabulate with labels from haven
tab2 = function(x, y = NULL) {
	if (!is.null(y)) return(table(to_factor(x), to_factor(y)))
	return(table(to_factor(x)))
}

#####Function to return weighted quantile
wquant = function(var, q, weight) {
  
  ##put into a dataframe to order together
  wdat = data.frame(var, weight)
  ##mark original ordering
  wdat$order = 1:nrow(wdat)
  ##container for quantile variable
  wdat$cvar = NA
  
  ##sort by var
  ord = order(wdat$var)
  wdat <- wdat[ord,]
  
  ##get cumulative sum of weight
  csum = cumsum(wdat$weight)
  csum = csum/max(csum, na.rm = TRUE)
  
  ##find breaks
  breaks = rep(NA, length(q))
  
  q = q[order(q, decreasing = FALSE)]
  w <- which(csum <= q[length(q)])
  wdat$cvar[w] = length(q)
  if (length(q) > 1) {
    for (j in (length(q)+1):1) {
      w <- which(csum <= q[j])
      wdat$cvar[w] = j
    }
  }
  
  ord = order(wdat$order)
  wdat = wdat[ord,]
  
  ##remove missing values
  mis = which(is.na(wdat$var))
  if (length(mis)>0) wdat$cvar[mis] = NA
  
  return(wdat$cvar)
}

#######Cut continuous
recode_continuous = function(x, cut,
                             labels = NULL) {
  cut = cut[order(cut, decreasing = TRUE)]
  
  rvar = rep(NA, length(x))
  for (j in 1:length(cut)) {
    w <- which(x <= cut[j])
    rvar[w] = length(cut) - j
  }
    
  mins = aggregate(x ~ rvar, FUN = min)
  maxs = aggregate(x ~ rvar, FUN = max)
  
  lab = paste(round(mins[,2],1), round(maxs[,2],1),
              sep = "-")
  vals = mins[,1]
  if (length(labels)!=length(vals)) names(vals) = lab
  if (length(labels) == length(vals)) names(vals) = labels    
  
  rvar = haven::labelled(rvar, labels = vals)
  return(rvar)
}

## Power analysis function
power_test = function(n.test, n.control,
                      mu.test, mu.control,
                      n.iter = 1000) {
  
  #containers to hold results
  res = sig = rep(NA, n.iter)
  
  for (j in 1:n.iter) {
    c = rbinom(1, n.control, mu.control)
    t = rbinom(1, n.test, mu.test)
    res[j] = (t/n.test)-(c/n.control)
    
    c1 = sample(c(rep(1, c), rep(0, n.control-c)))
    t1 = sample(c(rep(1, t), rep(0, n.test-t)))
    
    sig[j] = t.test(t1, c1)$p.value
  }
  
  #type s errors
  s = mean(res < 0 & sig < .05)
  
  #not significant difference
  ns = mean(sig > 0.05)
  
  #significant in the right direction
  g = mean(sig < 0.05 & res > 0)
  
  return(c("good" = g, "not_sig" = ns, "s_error" = s))
  
}
